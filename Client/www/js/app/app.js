/*
*	muskat client v0.0.1
*	Josef Schulz, 13.6.2016
*/

$(document).ready(function() {
	var debug_console = document.getElementById("textarea_debug");

	function debug(message) {
		debug_console.value += message + "\n";
		debug_console.scrollTop = debug_console.scrollHeight;
	}

	debug("muskat client v0.0.1")

	/*
	*	toggle visibility of the debug console
	*/

	$('#button_toggle_debug').click(function toggleDebug() {
		debug_console.style.visibility = (debug_console.style.visibility == "visible" || debug_console.style.visibility == "") ? "hidden" : "visible";
	});

	/*
	*	WebSocket global variables	
	*/

	var wsUri 		= "ws://localhost:1234";
	var websocket 	= null;
	var idCnt		= 0;

/*	var imgData = "";
	document.getElementById('img').setAttribute( 'src', 'data:image/jpeg;base64, '+imgData); * /
	/*
	*	change visibility of windows
	*/

	$('#button_connect_to_server').click(function connectToServer() {
		wsUri = $('#text_server_uri').val();	

		document.getElementById("window_config").style.display = "none";
		document.getElementById("window_render").style.display = "block";

		debug("connecting to " + wsUri);

		startWs();
	});

	/*
	*	Check if webgl is available and global variables
	*/

	if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

	var display;
	var stats;
	var camera, scene, renderer;
	var uniforms;
	var texture_rgb;
	var texture;


	/*
	* WsFunctions
	*/

	function startWs() {
		try {
			if (typeof MozWebSocket == 'function')
				WebSocket = MozWebSocket;
			if ( websocket && websocket.readyState == 1 )
				websocket.close();

			websocket = new WebSocket( wsUri );
			websocket.onopen = function (evt) {
				debug("connected to " + wsUri);
				
				init();
				animate();
			};

			websocket.onmessage = function (evt) {
				//debug("Message received: "+ evt.data );
				var obj = JSON.parse(evt.data);

				if(obj.result.rgb != "") {
  					

					  texture_rgb = new Image();
					  
					  
					  texture = new THREE.Texture();
					  
					  texture_rgb.onload = function () {
						texture.image = texture_rgb;
						texture.needsUpdate = true;
					  };

					  texture_rgb.src = 'data:image/jpeg;base64, ' + obj.result.rgb;
					  uniforms.texture.value = texture;
				}
				
				//debug("img data: " + obj.result.rgb);
                
            };

			websocket.onclose = function (evt) {
				debug("disconnected");
				
				document.getElementById("window_config").style.display = "block";
				document.getElementById("window_render").style.display = "none";
				$('#text_server_uri').val(wsUri);
			};

			websocket.onerror = function (evt) {
				debug('error: ' + evt.data);
			};
		} catch (exception) {
			debug('error: ' + exception);
		}
	}

	function closeWs() {
		if (websocket)
			websocket.close();
	}

	function init() {
		debug("init opengl");

		display = document.getElementById( 'display' );
		camera = new THREE.Camera();
		camera.position.z = 1;
		scene = new THREE.Scene();
		var geometry = new THREE.PlaneBufferGeometry( 2, 2, 1, 1 );
		uniforms = {
			time: { type: "f", value: 1.0 },
			texture: { type: "t", value: new THREE.TextureLoader().load("img/UV_Grid_Sm.jpg") },
			resolution: { type: "v2", value: new THREE.Vector2() }
		};
		var material = new THREE.ShaderMaterial( {
			uniforms: uniforms,
			vertexShader: document.getElementById( 'vertexShader' ).textContent,
			fragmentShader: document.getElementById( 'fragmentShader' ).textContent
		} );
		var mesh = new THREE.Mesh( geometry, material );
		scene.add( mesh );
		renderer = new THREE.WebGLRenderer();
		renderer.setPixelRatio( window.devicePixelRatio );
		display.appendChild( renderer.domElement );
		stats = new Stats();
		display.appendChild( stats.dom );
		onWindowResize();
		window.addEventListener( 'resize', onWindowResize, false );

		var controls = new THREE.FirstPersonControls( camera, renderer.domElement );
		controls.target.set( 0, 1, 0 );
		controls.update();

		debug("opengl is ready");

		for(var i = 0; i < 100; i++) {
			var msg = {
				"jsonrpc" : "2.0",
				"method" : "getFrame",
				"params" : {},
				"id" : idCnt
			};
			debug(JSON.stringify(msg));
			websocket.send(JSON.stringify(msg));
			idCnt++;
		}
	}

	function onWindowResize( event ) {
		renderer.setSize( window.innerWidth, window.innerHeight );
		uniforms.resolution.value.x = renderer.domElement.width;
		uniforms.resolution.value.y = renderer.domElement.height;
		debug("resize to "+ renderer.domElement.width + "X" + renderer.domElement.height);

		var msg = {
			"jsonrpc" : "2.0",
			"method" : "resize",
			"params" : { 
				"width" : renderer.domElement.width, 
				"height": renderer.domElement.height
			},
			"id" : idCnt
		};
		debug(JSON.stringify(msg));
		websocket.send(JSON.stringify(msg));
		idCnt++;
	}

	function animate() {
		/*var msg = {
			"jsonrpc" : "2.0",
			"method" : "getFrame",
			"params" : {},
			"id" : idCnt
		};
		debug(JSON.stringify(msg));
		websocket.send(JSON.stringify(msg));
		idCnt++;*/

		requestAnimationFrame( animate );
		render();
		stats.update();
	}

	function render() {
		uniforms.time.value += 0.05;
		renderer.render( scene, camera );
	}
});
